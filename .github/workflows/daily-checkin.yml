name: daily-checkin
on:
workflow_dispatch:
schedule:
- cron: '15 1 * * *' # 每天 01:15 UTC 触发
jobs:
run:
runs-on: ubuntu-latest
steps:
- uses: actions/setup-python@v5
with:
python-version: '3.11'

  - name: Install deps
    run: pip install requests

  - name: Run checkin
    env:
      ACCOUNTS: ${{ secrets.ACCOUNTS }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
    run: |
      python - <<'PY'
      import os, re, json, time, random, requests
      GLOBAL_TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
      GLOBAL_TG_CHAT_ID = os.getenv("TG_CHAT_ID")

      def notify(m, c=None):
          print(m)
          if GLOBAL_TG_BOT_TOKEN and (c or GLOBAL_TG_CHAT_ID):
              try:
                  requests.post(
                      f"https://api.telegram.org/bot{GLOBAL_TG_BOT_TOKEN}/
sendMessage",
data

={"chat_id": c or

GLOBAL_TG_CHAT_ID, "text": m},
timeout=20
)
except Exception as e:
print("TG 通知失败:", e)

      def v2(base, email, pwd):
          s = requests.Session()
          try:
              r =
s.post(f"{base}/api/v1/passport/auth/login", json={"email": email, "password": pwd}, timeout=20)
if r.status_code != 200:
return False, f"V2 登录失败 {r.status_code}: {r.text[:200]}"
d = r.json() if r.headers.get("content-type","").startswith("application/json") else {}
token = (d.get("data") or {}).get("token") or d.get("token")
if not token:
return False, f"V2 无 token: {d}"
cr = s.post(f"{base}/api/v1/user/checkin",

headers={"Authorization": f"Bearer {

token

{cr.status_code}: {cj}")
except Exception as e:
return False, f"V2 请求异常: {e}"

      def ex(html):
          m = re.search(r'name=["\']csrf-token["\']\s+content=["\']([^"\']+)', html, re.I) \
              or re.search(r'csrfToken["\']\s*[:=]\s*["\']([^"\']+)', html, re
.I)
or re.search(r'name=["']_token["']\s+value="'', html, re.I)
return m.group(1) if m else None

      def sspanel(base, email, pwd):
          s = requests.Session()
          try:
              r = s.get(f"{base}/auth/login", timeout=20)
              csrf = ex
(r.text) if r.ok else None
h = {"Referer": f"{base}/auth/login"}
if csrf: h["X-CSRF-Token"] = csrf
lr = s.post(f"{base}/auth/login", data={"email": email, "passwd": pwd, "remember_me": "on", "code": ""}, headers=h, timeout=20, allow_redirects=True)

              if lr.status_code not in (200, 302):
                  return False, f"SS 登录失败 {lr.status_code}: {lr.text[:200]}"
              ur = s.get(f"{base}/user", timeout=20)
              if ur.status_code != 200:
                  return False, f"SS /user
失败 {ur.status_code}"
page_csrf = ex(ur.text) or csrf
hh = {"Referer": f"{base}/user", "X-Requested-With": "XMLHttpRequest"}
if page_csrf: hh["X-CSRF-Token"] = page_csrf
cr = s.post(f"{base}/user/checkin", headers=hh, timeout=20)
try: cj = cr.json()
except: cj = {"raw": cr.text

}
return (cr.status_code == 200), (f"SS 成功: {cj}" if cr.status_code == 200 else f"SS 失败 {cr.status_code}: {cj}")
except Exception as e:
return False, f"SS 请求异常: {e}"

      def run_one(a):
          base = (a.get("base_url") or "
https://panel.freecloud.ltd").rstrip("/")
email = a.get("email"); pwd = a.get("password"); chat = a.get("tg_chat_id")
if not (email and pwd):
notify(f"[{base}] 缺少邮箱/密码，跳过。", chat); return
notify(f"开始

