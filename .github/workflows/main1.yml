name: daily-checkin
on:
workflow_dispatch:
schedule:
- cron: '15 1 * * *' # 每天 01:15 UTC 触发
jobs:
run:
runs-on: ubuntu-latest
steps:
- name: Set up Python
uses: actions/setup-python@v5
with:
python-version: '3.11'

  - name: Install deps
    run: pip install requests

  - name: Run checkin
    env:
      ACCOUNTS: ${{ secrets.ACCOUNTS }}
      TG_BOT_TOKEN: ${{
secrets.TG_BOT_TOKEN }}
TG_CHAT_ID：${{ secrets.TG_CHAT_ID }}
运行：|
python - <<'PY'
导入 o​​s、re、json、time、random、请求
TG_TOKEN = os.getenv("TG_BOT_TOKEN")
TG_CHAT = os.getenv("TG_CHAT_ID")

      def notify(msg, chat=None):
          print(msg)
          if TG_TOKEN and (chat or TG_CHAT):
              try:
                  requests.post(f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
                                data={"chat_id": chat or TG_CHAT, "text": msg}, timeout=20)
              except Exception as e:
                  print("TG 通知失败:", e)

      def v2_checkin(base, email, pwd):
          s = requests.Session()
          = r.json() if r.headers.get("content-type","").startswith("application/json") else {}
              token = (d.get("data") or {}).get("token") or d.get("token")
              if not token:
                  return False, f"V2Board 未找到 token: {d}"
              cr = s.post(f"{base}/api/v1/user/checkin", headers={"Authorization": f"Bearer {token}"}, timeout=20)
              try: cj
= cr.json()
except: cj = {"raw": cr.text}
return (cr.status_code == 200), (f"V2Board 成功签到: {cj}" if cr.status_code == 200 else f"V2Board 签到失败 {cr.status_code}: {cj}")
except Exception as e:
return False, f

“V2Board请求异常:

{e}”

      def extract_csrf(html):
          m = re.search(r'name=["\']csrf-token["\']\s+content=["\']([^"\']+)', html, re.I) \
            or re.search(r'csrfToken["\']\s*[:=]\s*["\']([^"\
']+)', html, re

": pwd, "remember_me": "on", "code": ""}, headers=headers, timeout=20, allow_redirects=True)
if lr.status_code not in (200, 302):
return False, f"SSPanel 登录失败 {lr.status_code}: {lr.text[:200]}"
ur = s.get(f"{base}/user", timeout=20)
if ur.status_code != 200:
return False, f"SSPanel /user 失败 {ur.status_code}"
page_csrf = extract_csrf(ur.text) or csrf
hh = {"Referer": f"{base}/user", "X-Requested-With": "XMLHttpRequest"}
if page_csrf:_code}: {cj}")
except Exception as e:
return False, f"SSPanel 请求异常: {e}”

      def run_one(acc):
          base = (acc.get("base_url") or "https://panel.freecloud.ltd").rstrip("/")
          email = acc.get("email"); pwd = acc.get("password"); chat = acc.get("tg_chat_id")
          if not (email and pwd):
              notify(f"[{base}] 缺少邮箱/密码，跳过。", chat); return
          notify(f"开始签到：{email} @ {base}", chat)
          ok, msg = v2_checkin(base, email, pwd)
          if ok: notify(f"{email} -> {msg}", chat); return
          notify(f"{email} -> [V2Board 未成功] {msg}", chat)
          ok2, msg2 = sspanel_checkin(base, email, pwd)
          if ok2: notify(f"{email} -> {msg2}", chat); return
          notify(f"{email} -> [SSPanel 未成功] {msg2}", chat)
          notify(f"{email} -> 可能有验证码/Cloudflare，需要 Cookie/Playwright 方案。", chat)

      def main():
          # 定时后再随机 0~120 分钟执行，可自行改动范围
          delay = random.randint(0, 120) * 60
          if delay > 0:
              print(f"随机延迟启动: {delay}
